<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
                        
<!-- 네임스페이스(사용영역) 설정 -->
<mapper namespace="com.ezen.mybatis.domain.employee.mapper.EmployeeMapper">
	
	<!-- select 태그를 이용하여 전체사원 조회를 위한 SQL 매핑 -->
	<select id="findAll" resultType="com.ezen.mybatis.domain.employee.dto.Employee" >
        SELECT employee_id                      AS "id",
               first_name                       AS "firstName",
               last_name                        AS "lastName",
               email                            AS "email",
               phone_number                     AS "phoneNumber",
               TO_CHAR(hire_date, 'YYYY-MM-DD') AS "hireDate",
               salary                           AS "salary"
        FROM employees
        ORDER BY hire_date ASC
    </select>
	
	<!-- 사원번호로 사원 조회 -->
	<select id="findById"  parameterType="int" resultType="Employee">
		SELECT employee_id                      "id",
		       first_name                       "firstName",
		       last_name                        "lastName",
		       email                            "email",
		       phone_number                     "phoneNumber",
		       TO_CHAR(hire_date, 'YYYY-MM-DD') "hireDate",
		       salary                           "salary"
		FROM   employees
		WHERE  employee_id = #{value}
	</select>

	<!-- 사원 급여 조회 -->
	<select id="findBySalary"  parameterType="int" resultType="int">
		SELECT salary
		FROM   employees
		WHERE  employee_id = #{value}
	</select>


<!--	&lt;!&ndash; 급여범위로 사원 검색 &ndash;&gt;-->
<!--	<select id="findBySalaryRange"  parameterType="map" resultType="Employee">-->
<!--		SELECT employee_id                      "id", -->
<!--		       first_name                       "firstName", -->
<!--		       last_name                        "lastName", -->
<!--		       email                            "email", -->
<!--		       phone_number                     "phoneNumber", -->
<!--		       TO_CHAR(hire_date, 'YYYY-MM-DD') "hireDate", -->
<!--		       salary                           "salary" -->
<!--		FROM   employees -->
<!--		WHERE  salary BETWEEN #{min} AND #{max} -->
<!--		&lt;!&ndash; WHERE salary &gt;= #{min} AND salary &lt;= #{max} &ndash;&gt;-->
<!--	</select>-->
<!--	-->
<!--	&lt;!&ndash; 성(last_name)으로 사원 와일드카드 검색(like 검색) &ndash;&gt;-->
<!--	<select id="findByLastName"  parameterType="string" resultType="Employee">-->
<!--		SELECT employee_id                      "id", -->
<!--		       first_name                       "firstName", -->
<!--		       last_name                        "lastName", -->
<!--		       email                            "email", -->
<!--		       phone_number                     "phoneNumber", -->
<!--		       TO_CHAR(hire_date, 'YYYY-MM-DD') "hireDate", -->
<!--		       salary                           "salary" -->
<!--		FROM   employees -->
<!--		WHERE  UPPER(last_name) LIKE #{lastName} -->
<!--	</select>-->
<!--	-->
<!--	&lt;!&ndash; HashMap을 이용한 검색 : 조인 시 사용 &ndash;&gt;-->
<!--	<select id="findByJoin"   resultType="map">-->
<!--		SELECT e.employee_id     "id", -->
<!--		       e.first_name      "firstName", -->
<!--		       e.last_name       "lastName", -->
<!--		       d.department_name "departmentName" -->
<!--		FROM   employees e -->
<!--		       JOIN departments d -->
<!--		         ON e.department_id = d.department_id -->
<!--	</select>-->
<!--	-->
<!--	&lt;!&ndash; 자주 사용되고, 자바빈의 속성이름과 테이블 컬럼이름이 다른 경우 resultMap 선언 &ndash;&gt;-->
<!--	<resultMap  id="employee" type="com.ezen.mybatis.domain.employee.dto.Employee">-->
<!--		<result property="id"           column="employee_id"/>-->
<!--		<result property="email"        column="email"/>-->
<!--		<result property="phoneNumber"  column="phone_number"/>-->
<!--		<result property="hireDate"     column="hire_date"/>-->
<!--	</resultMap>-->
<!--	-->
<!--	&lt;!&ndash; 전체사원 조회 &ndash;&gt;-->
<!--	<select id="findByAll2" resultMap="employee">-->
<!--		SELECT employee_id, -->
<!--		       email, -->
<!--		       phone_number, -->
<!--		       TO_CHAR(hire_date, 'YYYY-MM-DD') "hire_date"-->
<!--		FROM   employees-->
<!--		ORDER BY hire_date ASC-->
<!--	</select>-->
<!--	-->
<!--	&lt;!&ndash; 사원 등록 &ndash;&gt;-->
<!--	<insert id="create" parameterType="Employee">-->
<!--		INSERT INTO employees -->
<!--		            (employee_id, -->
<!--		             first_name, -->
<!--		             last_name, -->
<!--		             email, -->
<!--		             phone_number, -->
<!--		             hire_date, -->
<!--		             job_id, -->
<!--		             salary, -->
<!--		             manager_id, -->
<!--		             department_id) -->
<!--		VALUES     (employees_seq.nextval, -->
<!--		            #{firstName}, -->
<!--		            #{lastName}, -->
<!--		            #{email}, -->
<!--		            #{phoneNumber}, -->
<!--		            TO_DATE(#{hireDate}, 'YYYY-MM-DD'), -->
<!--		            #{jobId}, -->
<!--		            #{salary}, -->
<!--		            #{managerId}, -->
<!--		            #{departmentId})-->
<!--	</insert>-->
<!--		-->
<!--	&lt;!&ndash; 사원 정보 수정 &ndash;&gt;-->
<!--	<update id="update" parameterType="Employee">-->
<!--		UPDATE employees-->
<!--		SET    salary = #{salary}-->
<!--		WHERE  employee_id = #{id}-->
<!--	</update>-->
<!--	-->
<!--	&lt;!&ndash; 사원 정보 수정(set, if 태그를 이용한 동적 SQL) &ndash;&gt;-->
<!--	<update id="update2" parameterType="Employee">-->
<!--		UPDATE employees-->
<!--		<set>-->
<!--	        <if test="firstName != null">first_name = #{firstName},</if>-->
<!--	        <if test="lastName != null">last_name = #{lastName},</if>-->
<!--	        <if test="salary != null">salary = #{salary}</if>-->
<!--	    </set>-->
<!--	    WHERE employee_id = #{id}-->
<!--	</update>-->
<!--	-->
<!--	&lt;!&ndash; 사원 삭제 &ndash;&gt;-->
<!--	<delete id="delete" parameterType="int">-->
<!--		DELETE FROM employees-->
<!--		WHERE  employee_id = #{value}-->
<!--	</delete>-->
<!--	-->
<!--	&lt;!&ndash; 동적 SQL &ndash;&gt;-->
<!--	<select id="search" parameterType="map" resultType="Employee">-->
<!--		SELECT employee_id  "id", -->
<!--		       first_name   "firstName", -->
<!--		       salary-->
<!--		FROM   employees-->
<!--		<if test="type != null">-->
<!--			<choose>-->
<!--				<when test="type == 'id'">-->
<!--				WHERE employee_id = #{value}-->
<!--				</when>-->
<!--				<when test="type == 'name'">-->
<!--				WHERE first_name like #{value}-->
<!--				</when>-->
<!--				<otherwise></otherwise>-->
<!--			</choose>-->
<!--		</if>-->
<!--	</select>-->
</mapper>